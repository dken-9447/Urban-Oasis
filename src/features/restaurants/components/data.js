// data.js
// Import Firebase modules from the SDKs you need
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
import {
  getFirestore,
  collection,
  getDocs,
  doc,
  getDoc
} from "firebase/firestore";

// Your Firebase configuration (auto-generated by Firebase)
const firebaseConfig = {
  apiKey: "put me here",
  authDomain: "fput me here",
  databaseURL: "put me here",
  projectId: "put me here",
  storageBucket: "put me here",
  messagingSenderId: "put me here",
  appId: "put me here",
  measurementId: "put me here"
};

// 1) Initialize Firebase
const app = initializeApp(firebaseConfig);
// 2) Optional: Initialize Analytics (only works in certain environments)
const analytics = getAnalytics(app);
// 3) Get Firestore reference
const db = getFirestore(app);

/**
 * Fetch all recipes from Firestore and map them
 * to the shape your React app expects.
 */
export async function getRecipeList() {
  const snapshot = await getDocs(collection(db, "recipes"));
  const recipeList = [];

  snapshot.forEach((docSnap) => {
    const data = docSnap.data();
    recipeList.push({
      id: docSnap.id,
      name: data.Title || "Untitled",
      category: data.Category || "Uncategorized",
      rating: data.Rating || "Medium", // default if no rating stored
      time: data["Total Time"] || "30 minutes",
      image: data.Image || "https://placehold.co/400", // fallback image
    });
  });

  return recipeList;
}

/**
 * Get a single recipe document by ID.
 * Make sure your Firestore has a "recipes" collection with docs keyed by recipeId.
 */
export async function getRecipeDetail(recipeId) {
  try {
    console.log("Fetching recipe detail for ID:", recipeId);
    const docRef = doc(db, "recipes", recipeId);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
      console.log("Found recipe:", docSnap.data());
      return { id: docSnap.id, ...docSnap.data() };
    } else {
      console.log("No recipe found for ID:", recipeId);
      return null;
    }
  } catch (error) {
    console.log("Error fetching recipe detail:", error);
    return null;
  }
}

/**
 * Example: If you store ingredients in a subcollection:
 * /recipes/{recipeId}/ingredients
 */
export async function getIngredients(recipeId) {
  const snapshot = await getDocs(collection(db, "recipes", recipeId, "ingredients"));
  const ingredientsArray = [];
  snapshot.forEach((docSnap) => {
    ingredientsArray.push({ id: docSnap.id, ...docSnap.data() });
  });
  return ingredientsArray;
}

/**
 * Example: If you store directions in a subcollection:
 * /recipes/{recipeId}/directions
 */
export async function getDirections(recipeId) {
  const snapshot = await getDocs(collection(db, "recipes", recipeId, "directions"));
  const directionsArray = [];
  snapshot.forEach((docSnap) => {
    directionsArray.push({ id: docSnap.id, ...docSnap.data() });
  });
  return directionsArray;
}
